import React, { useState } from 'react'
import {
  FormControl,
  Select,
  MenuItem,
  TextField,
  Button,
  Checkbox,
  Link,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  styled
} from '@mui/material'
import Layout from '../../components/Layout/Layout'

// Ïª§Ïä§ÌÖÄ Ï≤¥ÌÅ¨Î∞ïÏä§ Ïä§ÌÉÄÏùº
const CustomCheckbox = styled(Checkbox)(({ theme }) => ({
  '& .MuiSvgIcon-root': {
    width: 16,
    height: 16,
    border: '1.5px solid #97c3f0',
    borderRadius: '3px',
    backgroundColor: 'white', // ÎØ∏Ï≤¥ÌÅ¨ ÏÉÅÌÉúÎäî Ìù∞ÏÉâ Î∞∞Í≤Ω
    '& path': {
      display: 'none', // Ï≤¥ÌÅ¨ ÏïÑÏù¥ÏΩò Ïà®ÍπÄ
    },
  },
  '&.Mui-checked .MuiSvgIcon-root': {
    backgroundColor: 'rgba(199, 223, 247, 0.8)', // Ï≤¥ÌÅ¨Îêú ÏÉÅÌÉúÎßå ÌååÎûÄÏÉâ Î∞∞Í≤Ω
    borderColor: '#97c3f0',
  },
  '&.MuiCheckbox-indeterminate .MuiSvgIcon-root': {
    backgroundColor: 'rgba(199, 223, 247, 0.8)', // indeterminate ÏÉÅÌÉúÎèÑ ÌååÎûÄÏÉâ Î∞∞Í≤Ω
    borderColor: '#97c3f0',
  },
  '&:hover .MuiSvgIcon-root': {
    borderColor: '#a5cef3',
    backgroundColor: 'white', // ÎØ∏Ï≤¥ÌÅ¨ Ìò∏Î≤Ñ ÏãúÏóêÎèÑ Ìù∞ÏÉâ Ïú†ÏßÄ
  },
  '&.Mui-checked:hover .MuiSvgIcon-root': {
    backgroundColor: 'rgba(199, 223, 247, 0.9)', // Ï≤¥ÌÅ¨Îêú ÏÉÅÌÉú Ìò∏Î≤Ñ ÏãúÎßå ÌååÎûÄÏÉâ
    borderColor: '#a5cef3',
  },
}))

const noticeData = [
  {
    id: 1,
    number: 1,
    title: 'ÌöåÏùòÎ°ù AI Í∏∞Îä• ÏóÖÎç∞Ïù¥Ìä∏ ÏïàÎÇ¥',
    author: 'Í¥ÄÎ¶¨Ïûê',
    startDate: '24-12-20',
    endDate: '25-01-20',
    status: 'Í≤åÏãúÏ§ë',
    isPopup: true,
    createdAt: '24-12-20 14:30',
    isSelected: false
  },
  {
    id: 2,
    number: 2,
    title: '2025ÎÖÑ Ïã†Í∑ú Í∏∞Îä• Ï∂úÏãú ÏòàÏ†ï ÏïàÎÇ¥',
    author: 'Í∞úÎ∞úÌåÄ',
    startDate: '24-12-15',
    endDate: '25-02-15',
    status: 'Í≤åÏãúÏ§ë',
    isPopup: false,
    createdAt: '24-12-15 09:15',
    isSelected: false
  },
  {
    id: 3,
    number: 3,
    title: 'ÏãúÏä§ÌÖú Ï†ïÍ∏∞ Ï†êÍ≤Ä ÏïàÎÇ¥',
    author: 'Ïö¥ÏòÅÌåÄ',
    startDate: '24-12-10',
    endDate: '24-12-25',
    status: 'Í≤åÏãúÏ¢ÖÎ£å',
    isPopup: false,
    createdAt: '24-12-10 16:45',
    isSelected: false
  }
]

const NoticePage = () => {
  const [notices, setNotices] = useState(noticeData)
  const [selectAll, setSelectAll] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [searchType, setSearchType] = useState('Ï†ÑÏ≤¥')
  const [pageSize, setPageSize] = useState(10)
  const [dateRange, setDateRange] = useState('')
  const [showDeleteDialog, setShowDeleteDialog] = useState(false)

  const handleSelectAll = (e) => {
    const checked = e.target.checked
    setSelectAll(checked)
    setNotices(notices.map(notice => ({ ...notice, isSelected: checked })))
  }

  const handleSelectNotice = (id, checked) => {
    setNotices(notices.map(notice => 
      notice.id === id ? { ...notice, isSelected: checked } : notice
    ))
    const selectedCount = notices.filter(n => n.id === id ? checked : n.isSelected).length
    setSelectAll(selectedCount === notices.length)
  }

  const handleEdit = (id) => {
    console.log('Edit notice:', id)
  }

  const handleDelete = (id) => {
    if (window.confirm('Ïù¥ Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      setNotices(prev => prev.filter(notice => notice.id !== id))
    }
  }

  const handleView = (id) => {
    console.log('View notice:', id)
    window.open(`/notice/${id}`, '_blank')
  }

  const handleBulkDelete = () => {
    const selectedNotices = notices.filter(notice => notice.isSelected)
    if (selectedNotices.length === 0) {
      alert('ÏÇ≠Ï†úÌï† Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.')
      return
    }
    setShowDeleteDialog(true)
  }

  const confirmBulkDelete = () => {
    setNotices(prev => prev.filter(notice => !notice.isSelected))
    setSelectAll(false)
    setShowDeleteDialog(false)
  }

  return (
    <Layout className="notice-page">
      <div className="content">
        <div className="content-header">
          <h1 className="breadcrumb">Í≥µÏßÄÏÇ¨Ìï≠ Í¥ÄÎ¶¨</h1>
        </div>

        <div className="content-body">
          {/* Í≤ÄÏÉâ ÏòÅÏó≠ */}
          <div className="search-section">
            <div className="common-topbar">
              <div className="tb-left">
                <div className="date-range-wrap">
                  <span className="calendar-icon">üìÖ</span>
                  <TextField
                    id="consent-range"
                    className="date-range"
                    placeholder="ÎÇ†Ïßú Î≤îÏúÑÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî"
                    value={dateRange}
                    onChange={(e) => setDateRange(e.target.value)}
                    variant="outlined"
                    size="small"
                    InputProps={{ readOnly: true }}
                  />
                  <div className="range-panel" id="consent-panel">
                    <div className="calendar-range">
                      <div className="calendar" id="consent-cal-start"></div>
                      <div className="calendar" id="consent-cal-end"></div>
                    </div>
                    <div className="range-panel-info">
                      <span id="consent-picked">-</span>
                      <div className="range-actions">
                        <button className="btn-outline" id="consent-cancel">Ï∑®ÏÜå</button>
                        <button className="btn-submit" id="consent-apply">Ï†ÅÏö©</button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="tb-right">
                <div className="right-tail">
                  <FormControl size="small" className="condition-select">
                    <Select
                      value={pageSize}
                      onChange={(e) => setPageSize(e.target.value)}
                      variant="outlined"
                    >
                      <MenuItem value={10}>10Í∞úÏî© Î≥¥Í∏∞</MenuItem>
                      <MenuItem value={20}>20Í∞úÏî© Î≥¥Í∏∞</MenuItem>
                      <MenuItem value={50}>50Í∞úÏî© Î≥¥Í∏∞</MenuItem>
                    </Select>
                  </FormControl>
                  <FormControl size="small" className="condition-select">
                    <Select
                      value={searchType}
                      onChange={(e) => setSearchType(e.target.value)}
                      variant="outlined"
                    >
                      <MenuItem value="Ï†ÑÏ≤¥">Ï†ÑÏ≤¥</MenuItem>
                      <MenuItem value="Íµ¨Î∂Ñ">Íµ¨Î∂Ñ</MenuItem>
                      <MenuItem value="Ïù¥Î¶Ñ">Ïù¥Î¶Ñ</MenuItem>
                      <MenuItem value="Ïù¥Î©îÏùº">Ïù¥Î©îÏùº</MenuItem>
                      <MenuItem value="Ï†úÎ™©">Ï†úÎ™©</MenuItem>
                      <MenuItem value="Î≤ÑÏ†Ñ">Î≤ÑÏ†Ñ</MenuItem>
                    </Select>
                  </FormControl>
                  
                  <TextField
                    placeholder="Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    variant="outlined"
                    size="small"
                    className="search-input-field"
                  />
                  
                  <Button 
                    variant="contained"
                    className="search-btn"
                  >
                    Ï°∞Ìöå
                  </Button>
                </div>
              </div>
            </div>
          </div>

          {/* Í≥µÏßÄÏÇ¨Ìï≠ ÌÖåÏù¥Î∏î */}
          <div className="table-container">
            <table>
              <thead>
                <tr>
                  <th width="50">
                    <CustomCheckbox
                      id="notice-select-all"
                      checked={selectAll}
                      onChange={handleSelectAll}
                      size="small"
                    />
                  </th>
                  <th width="60">Î≤àÌò∏</th>
                  <th width="300">Ï†úÎ™©</th>
                  <th width="100">ÏûëÏÑ±Ïûê</th>
                  <th width="140">Í≤åÏãúÍ∏∞Í∞Ñ</th>
                  <th width="80">ÏÉÅÌÉú</th>
                  <th width="70">ÌåùÏóÖ</th>
                  <th width="110">ÏûëÏÑ±Ïùº</th>
                  <th width="80">Í¥ÄÎ¶¨</th>
                </tr>
              </thead>
              <tbody>
                {notices.slice(0, pageSize).map((notice) => (
                  <tr key={notice.id}>
                    <td>
                      <CustomCheckbox
                        checked={notice.isSelected}
                        onChange={(e) => handleSelectNotice(notice.id, e.target.checked)}
                        size="small"
                      />
                    </td>
                    <td>{notice.number}</td>
                    <td>
                      <Link
                        href="#"
                        onClick={() => handleView(notice.id)}
                        className="notice-title"
                        underline="none"
                      >
                        {notice.title}
                      </Link>
                    </td>
                    <td>{notice.author}</td>
                    <td>{notice.startDate} ~ {notice.endDate}</td>
                    <td>
                      <Chip
                        label={notice.status}
                        size="small"
                        color={notice.status === 'Í≤åÏãúÏ§ë' ? 'success' : 'default'}
                        variant="outlined"
                        className={`status-badge ${notice.status === 'Í≤åÏãúÏ§ë' ? 'active' : 'inactive'}`}
                      />
                    </td>
                    <td>
                      <Chip
                        label={notice.isPopup ? 'ON' : 'OFF'}
                        size="small"
                        color={notice.isPopup ? 'primary' : 'default'}
                        variant="outlined"
                        className={`popup-badge ${notice.isPopup ? 'on' : 'off'}`}
                      />
                    </td>
                    <td>{notice.createdAt}</td>
                    <td>
                      <div className="action-buttons">
                        <button 
                          className="btn-icon edit-btn"
                          onClick={() => handleEdit(notice.id)}
                          title="ÏàòÏ†ï"
                        >
                          ‚úèÔ∏è
                        </button>
                        <button 
                          className="btn-icon delete-btn"
                          onClick={() => handleDelete(notice.id)}
                          title="ÏÇ≠Ï†ú"
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* ÏùºÍ¥Ñ Ïï°ÏÖò Î≤ÑÌäº */}
          <div className="table-actions">
            <button className="btn-danger" onClick={handleBulkDelete}>
              ÏÑ†ÌÉù ÏÇ≠Ï†ú
            </button>
          </div>
        </div>
      </div>

      {/* ÏÇ≠Ï†ú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      <Dialog
        open={showDeleteDialog}
        onClose={() => setShowDeleteDialog(false)}
      >
        <DialogTitle>Í≥µÏßÄÏÇ¨Ìï≠ ÏÇ≠Ï†ú</DialogTitle>
        <DialogContent>
          ÏÑ†ÌÉùÎêú Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowDeleteDialog(false)} variant="outlined">
            Ï∑®ÏÜå
            </Button>
          <Button onClick={confirmBulkDelete} color="error" variant="contained">
            ÏÇ≠Ï†ú
            </Button>
        </DialogActions>
      </Dialog>
    </Layout>
  )
}

export default NoticePage